---@diagnostic disable: unused-function, unused-local
loadstring(game:HttpGet('https://raw.githubusercontent.com/drillygzzly/Roblox-UI-Libs/main/Yun%20V2%20Lib/Yun%20V2%20Lib%20Source.lua'))()

local notif = loadstring(game:HttpGet("https://raw.githubusercontent.com/insanedude59/notiflib/main/main"))()


notif:Notification("EXZILE Dev Version","Loading","GothamSemibold","Gotham",5) -- title: <string> description: <string> title font: <string> description font: <string> notification show time: <number>

local Library = initLibrary()
local Window = Library:Load({name = "exzile dev version", sizeX = 425, sizeY = 512, color = Color3.fromRGB(255, 255, 255)})

local Tab = Window:Tab("Aiming")
local Tab2 = Window:Tab("Visuals")

local Aimingsec1 = Tab:Section{name = "Aim Assist", column = 1}
local Visualssec1 = Tab2:Section{name = "Wallhacks", column = 1}

-- üì¶ Servi√ßos do Roblox
local Camera = workspace.CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Space = game:GetService("Workspace")

-- ‚öôÔ∏è Configura√ß√µes do Aimbot
local AimbotEnabled = false
local AimPart = "Head"
local Smoothing = 3
local FOVSize = 100
local FOVVisible = true
local AimbotKey = Enum.KeyCode.E -- Tecla padr√£o (E)
local HoldingKey = false

-- Lista de teclas e bot√µes do mouse para ativar o Aimbot
local AvailableKeys = {
    ["E"] = Enum.KeyCode.E,
    ["Q"] = Enum.KeyCode.Q,
    ["R"] = Enum.KeyCode.R,
    ["F"] = Enum.KeyCode.F,
    ["T"] = Enum.KeyCode.T,
    ["G"] = Enum.KeyCode.G,
    ["V"] = Enum.KeyCode.V,
    ["X"] = Enum.KeyCode.X,
    ["Z"] = Enum.KeyCode.Z,
    ["C"] = Enum.KeyCode.C,
    ["Mouse1"] = Enum.UserInputType.MouseButton1, -- Bot√£o esquerdo
    ["Mouse2"] = Enum.UserInputType.MouseButton2  -- Bot√£o direito
}

-- Criar o c√≠rculo do FOV
local FOVCircle = Drawing.new("Circle")
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Thickness = 1
FOVCircle.Transparency = 0.5
FOVCircle.NumSides = 64
FOVCircle.Filled = false
FOVCircle.Radius = FOVSize
FOVCircle.Visible = FOVVisible

local function GetClosestPlayer()
    local Target = nil
    local MaxDist = FOVSize

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            local TargetPart = player.Character:FindFirstChild(AimPart)
            if TargetPart then
                local ScreenPos, OnScreen = Camera:WorldToScreenPoint(TargetPart.Position)
                if OnScreen then
                    local Distance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPos.X, ScreenPos.Y)).Magnitude
                    if Distance < MaxDist then
                        MaxDist = Distance
                        Target = player
                    end
                end
            end
        end
    end
    return Target
end

-- Eventos para detectar quando a tecla ou bot√£o do mouse √© pressionado/solto
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == AimbotKey or input.UserInputType == AimbotKey then
        HoldingKey = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == AimbotKey or input.UserInputType == AimbotKey then
        HoldingKey = false
    end
end)

RunService.RenderStepped:Connect(function()
    -- Atualiza a posi√ß√£o e visibilidade do FOV
    FOVCircle.Position = Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)
    FOVCircle.Radius = FOVSize
    FOVCircle.Visible = FOVVisible

    -- L√≥gica do Aimbot
    if AimbotEnabled and HoldingKey then
        local target = GetClosestPlayer()
        if target and target.Character and target.Character:FindFirstChild(AimPart) then
            local targetPos = target.Character[AimPart].Position
            Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, targetPos), Smoothing / 10)
        end
    end
end)

local function GetClosestPlayer()
    local MaximumDistance = _G.CircleRadius
    local Target = nil
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
            local TargetPart = player.Character:FindFirstChild(_G.AimPart)
            if TargetPart then
                local ScreenPos, OnScreen = Camera:WorldToScreenPoint(TargetPart.Position)
                if OnScreen then
                    local Distance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(ScreenPos.X, ScreenPos.Y)).Magnitude
                    if Distance < MaximumDistance then
                        MaximumDistance = Distance
                        Target = player
                    end
                end
            end
        end
    end
    return Target
end

-- Configura√ß√µes do ESP
local Settings = {
    Box_Color = Color3.fromRGB(255, 0, 0), -- Cor inicial
    Box_Thickness = 2,
    Team_Check = false,
    Enabled = false -- Toggle do ESP
}

-- Fun√ß√£o para criar linhas do ESP
local function NewLine()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Color = Settings.Box_Color -- Sempre usa a cor escolhida no menu
    line.Thickness = Settings.Box_Thickness
    return line
end

-- Fun√ß√£o para atualizar a visibilidade do ESP
local function Vis(lib, state)
    for _, v in pairs(lib) do
        v.Visible = state
    end
end

-- Fun√ß√£o para atualizar a cor do ESP dinamicamente
local function AtualizarCores(lib)
    for _, line in pairs(lib) do
        line.Color = Settings.Box_Color -- Aplica a cor do menu em tempo real
    end
end

-- Loop para desenhar o ESP
local function Main(plr)
    repeat wait() until plr.Character and plr.Character:FindFirstChild("Humanoid")

    local Library = {
        TL1 = NewLine(), TL2 = NewLine(),
        TR1 = NewLine(), TR2 = NewLine(),
        BL1 = NewLine(), BL2 = NewLine(),
        BR1 = NewLine(), BR2 = NewLine()
    }

    -- Atualiza√ß√£o do ESP
    local function Updater()
        local c
        c = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character.Humanoid.Health > 0 then
                local Hum = plr.Character
                local HumPos, vis = game:GetService("Workspace").CurrentCamera:WorldToViewportPoint(Hum.HumanoidRootPart.Position)
                if vis then
                    AtualizarCores(Library) -- Atualiza a cor do ESP
                    Vis(Library, Settings.Enabled) -- Controla visibilidade do ESP

                    -- Desenha as linhas do ESP
                    local TL = Camera:WorldToViewportPoint(Hum.HumanoidRootPart.Position + Vector3.new(-2, 3, 0))
                    local TR = Camera:WorldToViewportPoint(Hum.HumanoidRootPart.Position + Vector3.new(2, 3, 0))
                    local BL = Camera:WorldToViewportPoint(Hum.HumanoidRootPart.Position + Vector3.new(-2, -3, 0))
                    local BR = Camera:WorldToViewportPoint(Hum.HumanoidRootPart.Position + Vector3.new(2, -3, 0))

                    Library.TL1.From, Library.TL1.To = Vector2.new(TL.X, TL.Y), Vector2.new(TL.X + 5, TL.Y)
                    Library.TL2.From, Library.TL2.To = Vector2.new(TL.X, TL.Y), Vector2.new(TL.X, TL.Y + 5)

                    Library.TR1.From, Library.TR1.To = Vector2.new(TR.X, TR.Y), Vector2.new(TR.X - 5, TR.Y)
                    Library.TR2.From, Library.TR2.To = Vector2.new(TR.X, TR.Y), Vector2.new(TR.X, TR.Y + 5)

                    Library.BL1.From, Library.BL1.To = Vector2.new(BL.X, BL.Y), Vector2.new(BL.X + 5, BL.Y)
                    Library.BL2.From, Library.BL2.To = Vector2.new(BL.X, BL.Y), Vector2.new(BL.X, BL.Y - 5)

                    Library.BR1.From, Library.BR1.To = Vector2.new(BR.X, BR.Y), Vector2.new(BR.X - 5, BR.Y)
                    Library.BR2.From, Library.BR2.To = Vector2.new(BR.X, BR.Y), Vector2.new(BR.X, BR.Y - 5)
                else
                    Vis(Library, false)
                end
            else
                Vis(Library, false)
                if not game:GetService("Players"):FindFirstChild(plr.Name) then
                    for _, v in pairs(Library) do v:Remove() end
                    c:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Updater)()
end

-- Criar ESP para todos os jogadores
for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v ~= game.Players.LocalPlayer then
        coroutine.wrap(Main)(v)
    end
end

game:GetService("Players").PlayerAdded:Connect(function(newplr)
    coroutine.wrap(Main)(newplr)
end)


-- Toggle do Aimbot
Aimingsec1:Toggle {
    Name = "Enabled",
    flag = "aimbot_toggle", 
    callback = function(bool)
        AimbotEnabled = bool
    end
}

-- Slider para suaviza√ß√£o (Smoothing)
Aimingsec1:Slider {
    Name = "Smoothing",
    Default = 3,
    Min = 1,
    Max = 10,
    Decimals = 1,
    Flag = "aimbot_smoothing",
    callback = function(value)
        Smoothing = value
    end
}

-- Dropdown para escolher a parte do corpo a mirar
Aimingsec1:dropdown {
    name = "Aim",
    content = {"Head", "Torso", "HumanoidRootPart", "Right Arm", "Left Arm"},
    multichoice = false,
    callback = function(selection)
        AimPart = selection
    end
}

-- Toggle para mostrar/ocultar o FOV
Aimingsec1:Toggle {
    Name = "Show FOV",
    flag = "fov_toggle", 
    callback = function(bool)
        FOVVisible = bool
    end
}

-- Slider para ajustar o tamanho do FOV
Aimingsec1:Slider {
    Name = "FOV Size",
    Default = 100,
    Min = 20,
    Max = 300,
    Decimals = 1,
    Flag = "fov_size",
    callback = function(value)
        FOVSize = value
    end
}

-- Dropdown para escolher a tecla/bot√£o de ativa√ß√£o do Aimbot
Aimingsec1:dropdown {
    name = "Aimbot Key",
    content = {"E", "Q", "R", "F", "T", "G", "V", "X", "Z", "C", "Mouse1", "Mouse2"},
    multichoice = false,
    callback = function(selectedKey)
        AimbotKey = AvailableKeys[selectedKey] -- Define a nova tecla ou bot√£o do mouse
    end
}
-- Toggle no menu
Visualssec1:Toggle {
    Name = "3D ESP",
    flag = "esp_toggle", 
    callback = function(bool)
        Settings.Enabled = bool
    end
}

-- üé® Op√ß√µes de Cores para ESP e FOV
local colors = {
    ["Vermelho"] = Color3.fromRGB(255, 0, 0),
    ["Verde"] = Color3.fromRGB(0, 255, 0),
    ["Azul"] = Color3.fromRGB(0, 0, 255),
    ["Roxo"] = Color3.fromRGB(128, 0, 128),
    ["Amarelo"] = Color3.fromRGB(255, 255, 0),
    ["Branco"] = Color3.fromRGB(255, 255, 255)
}

-- Criar Dropdown no Menu
Visualssec1:dropdown {
    name = "ESP Color",
    content = {"Vermelho", "Verde", "Azul", "Roxo", "Amarelo", "Branco"},
    callback = function(selected)
        Settings.Box_Color = colors[selected] or Color3.fromRGB(255, 0, 0) -- Atualiza a cor
    end
}

-- üì¶ Dropdown para selecionar cor do FOV
Visualssec1:dropdown {
    name = "Cor do FOV (BETA)",
    content = {"Vermelho", "Verde", "Azul", "Amarelo", "Roxo", "Ciano", "Branco"},
    multichoice = false,
    callback = function(selected)
        for _, option in ipairs(ColorOptions) do
            if option.Name == selected then
                _G.FOVColor = option.Color
                break
            end
        end
    end
}
